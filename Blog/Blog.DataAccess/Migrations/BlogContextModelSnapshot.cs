// <auto-generated />
using System;
using Blog.DataAccess.DataAccess.DataContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Blog.DataAccess.Migrations
{
    [DbContext(typeof(BlogContext))]
    partial class BlogContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Blog.Entities.Entities.Article", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("Publish")
                        .HasColumnType("boolean");

                    b.Property<string>("SubcategoryID")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.Property<string>("cateogryID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("SubcategoryID");

                    b.HasIndex("UserID");

                    b.HasIndex("cateogryID");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Category", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Comment", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ArticleID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UserID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ArticleID");

                    b.HasIndex("UserID");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Subcategory", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("CategoryID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Subcategory");
                });

            modelBuilder.Entity("Blog.Entities.Entities.User", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<int>("Rol")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.ToTable("User");

                    b.HasData(
                        new
                        {
                            ID = "97514786-c4bb-4017-af49-83ba0ab059b5",
                            Active = true,
                            Name = "admin",
                            Password = "123456",
                            Rol = 0
                        });
                });

            modelBuilder.Entity("Blog.Entities.Entities.Article", b =>
                {
                    b.HasOne("Blog.Entities.Entities.Subcategory", null)
                        .WithMany("Articles")
                        .HasForeignKey("SubcategoryID");

                    b.HasOne("Blog.Entities.Entities.User", "User")
                        .WithMany("Articles")
                        .HasForeignKey("UserID");

                    b.HasOne("Blog.Entities.Entities.Category", "cateogry")
                        .WithMany("Articles")
                        .HasForeignKey("cateogryID");

                    b.Navigation("User");

                    b.Navigation("cateogry");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Comment", b =>
                {
                    b.HasOne("Blog.Entities.Entities.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Blog.Entities.Entities.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserID");

                    b.Navigation("Article");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Subcategory", b =>
                {
                    b.HasOne("Blog.Entities.Entities.Category", "Category")
                        .WithMany("Subcategory")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Category", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Subcategory");
                });

            modelBuilder.Entity("Blog.Entities.Entities.Subcategory", b =>
                {
                    b.Navigation("Articles");
                });

            modelBuilder.Entity("Blog.Entities.Entities.User", b =>
                {
                    b.Navigation("Articles");

                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
